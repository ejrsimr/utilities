#!/usr/bin/env python3
# fasta2tab
# print out table of sequences from FASTA file.
# ejr: 2022-10-12
# lmd: 2023-02-22
import fileinput
import signal

###############################################################################
### MAIN 
###############################################################################
def main():
    fh = fileinput.input()
    fasta = read_fasta(fh)
    print_seqtable(fasta)

###############################################################################
### Print FASTA Dictionary as seqtable to STDOUT
###############################################################################
def print_seqtable(fasta):
    for header in fasta:
        print(header, fasta[header], sep="\t")

###############################################################################
### Read FASTA filehandle into dictionary
###############################################################################
def read_fasta(fh):
    header = ""
    fasta = {}

    for line in fh:
        line = line.rstrip()
        # starts with handles blank lines better than line[0]
        if (line.startswith(">")):
            header = line[1:]
            fasta[header] = []
        else:
            fasta[header].append(line)
    # append is more efficient that string concatenation
    for header in fasta:
        fasta[header] = ''.join(fasta[header])

    return fasta

###############################################################################
### RUN MAIN 
###############################################################################
if __name__ == "__main__":
    # this catches sigpipe errors so you don't get an error message if you tail of head output
    signal.signal(signal.SIGPIPE, signal.SIG_DFL)
    main()